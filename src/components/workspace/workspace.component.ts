import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

type Kpi = { label: string; value: string };
type ChecklistItem = { title: string; sub: string; done: boolean };
type FeedItem = { id: string; ts: string; text: string; type: 'note' | 'decision' | 'todo' };
type CommentItem = { id: string; anchor: string; text: string; author: string; status: 'open' | 'resolved'; ts: string };
type FieldRow = { field: string; value: string; note: string };
type Version = { id: string; label: string; ts: string, snapshot: FieldRow[] };
type AuditItem = { id: string; text: string; ts: string };

@Component({
  selector: 'app-workspace',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './workspace.component.html',
  styleUrl: './workspace.component.scss',
})
export class WorkspaceComponent {
  // ----- Tabs -----
  // --- Layout ---
  showAssistant = true;

  // --- Tabs ---
  tabs: ('overview'|'workspace'|'spec'|'editor')[] = ['overview','workspace','spec','editor'];
  activeTab: 'overview'|'workspace'|'spec'|'editor' = 'overview';
  setTab(t: 'overview'|'workspace'|'spec'|'editor') { this.activeTab = t; }

  // --- Overview ---
  overviewKPIs: Kpi[] = [
    { label: 'Phase', value: 'Kickoff' },
    { label: 'Spec Coverage', value: '32%' },
    { label: 'Workshops Scheduled', value: '5' },
    { label: 'Pending Decisions', value: '0' }
  ];

  checklist: ChecklistItem[] = [
    { title: 'Invite core team members', sub: 'Assign roles: BA, Consultant, Tester, Sponsor', done: false },
    { title: 'Connect calendar & conferencing', sub: 'Sync Teams/Zoom and auto-import meeting notes', done: false },
    { title: 'Verify modules & scope', sub: 'Finance, Integrations (edit if needed)', done: false },
    { title: 'Confirm workshop plan', sub: '3-week cadence autogenerated', done: false },
    { title: 'Share RFP/spec pack', sub: 'Ensure stakeholders can access the docs', done: false },
  ];
  toggleChecklist(i: number) { this.checklist[i].done = !this.checklist[i].done; }
  get checklistProgress(): string {
    const done = this.checklist.filter(c=>c.done).length;
    return `${done}/${this.checklist.length} completed`;
  }

  // --- Workspace KPIs ---
  wsHeld = 6; wsTotal = 10;
  decRes = 2; decTotal = 4;
  cov = 63;
  get progress(): number {
    const ws = this.wsHeld/this.wsTotal;
    const dr = this.decRes/this.decTotal;
    const cv = this.cov/100;
    return Math.round(((ws*0.5) + (dr*0.25) + (cv*0.25)) * 100);
  }
  adjust(kind: 'ws'|'dec'|'cov', delta: number) {
    if (kind==='ws') this.wsHeld = Math.max(0, Math.min(this.wsTotal, this.wsHeld + delta));
    if (kind==='dec') this.decRes = Math.max(0, Math.min(this.decTotal, this.decRes + delta));
    if (kind==='cov') this.cov = Math.max(0, Math.min(100, this.cov + delta));
  }

  // --- Spec Feed ---
  feed: FeedItem[] = [
    { id: 'f1', ts: '2025-08-10 10:12', text: 'Kickoff notes ingested from Teams meeting.', type: 'note' },
    { id: 'f2', ts: '2025-08-11 09:30', text: 'Decision: Use S/4 on-prem for Finance.', type: 'decision' },
    { id: 'f3', ts: '2025-08-12 14:05', text: 'TODO: Validate vendor bank file format.', type: 'todo' },
  ];
  newFeedText = '';
  addFeedItem() {
    const t = this.newFeedText.trim();
    if (!t) return;
    const next: FeedItem = { id: crypto.randomUUID(), ts: new Date().toISOString().slice(0,16).replace('T',' '), text: t, type: 'note' };
    this.feed.unshift(next);
    this.newFeedText = '';
  }

  // --- Comments ---
  comments: CommentItem[] = [
    { id: 'c1', anchor: 'OV-1', text: 'Clarify month-end process for AP.', author: 'Maya', status: 'open', ts: '2025-08-12 09:10' },
    { id: 'c2', anchor: 'WS-2', text: 'Need workshop recording transcript.', author: 'Ishan', status: 'resolved', ts: '2025-08-12 15:40' },
  ];
  newComment = '';
  addComment() {
    const t = this.newComment.trim();
    if (!t) return;
    const next: CommentItem = { id: crypto.randomUUID(), anchor: 'GEN', text: t, author: 'You', status: 'open', ts: new Date().toISOString().slice(0,16).replace('T',' ') };
    this.comments.unshift(next);
    this.newComment = '';
  }
  toggleComment(id: string) {
    const c = this.comments.find(x => x.id === id);
    if (c) c.status = c.status === 'open' ? 'resolved' : 'open';
  }
  removeComment(id: string) {
    this.comments = this.comments.filter(c => c.id !== id);
  }

  // --- Editor ---
  rows: FieldRow[] = [
    { field: 'Company Code', value: 'AC01', note: 'Primary entity' },
    { field: 'Currency', value: 'USD', note: 'Transactional' },
    { field: 'Fiscal Year Variant', value: 'K4', note: 'Jan–Dec' },
  ];
  draftField: FieldRow = { field: '', value: '', note: '' };
  audit: AuditItem[] = [
    { id: 'a1', ts: '2025-08-10 10:15', text: 'Imported initial spec v0' },
  ];
  versions: Version[] = [
    { id: 'v1', label: 'v1 (baseline)', ts: '2025-08-10', snapshot: [
      { field: 'Company Code', value: 'AC01', note: 'Primary entity' },
      { field: 'Currency', value: 'USD', note: 'Transactional' },
      { field: 'Fiscal Year Variant', value: 'K4', note: 'Jan–Dec' },
    ]},
  ];

  addRow() {
    if (!this.draftField.field.trim()) return;
    this.rows = [...this.rows, { ...this.draftField }];
    this.audit = [{ id: crypto.randomUUID(), ts: new Date().toISOString(), text: `Added field “${this.draftField.field}”` }, ...this.audit];
    this.draftField = { field: '', value: '', note: '' };
  }
  removeRow(i: number) {
    const r = this.rows[i];
    this.rows = this.rows.filter((_, idx) => idx !== i);
    this.audit = [{ id: crypto.randomUUID(), ts: new Date().toISOString(), text: `Removed field “${r.field}”` }, ...this.audit];
  }
  saveVersion() {
    const snap = this.rows.map(r => ({...r}));
    const label = `v${this.versions.length + 1}`;
    const v: Version = { id: crypto.randomUUID(), label, ts: new Date().toISOString().slice(0,10), snapshot: snap };
    this.versions = [v, ...this.versions];
    this.audit = [{ id: crypto.randomUUID(), ts: new Date().toISOString(), text: `Saved version ${label}` }, ...this.audit];
  }
  loadVersion(id: string) {
    const v = this.versions.find(x => x.id === id);
    if (!v) return;
    this.rows = v.snapshot.map(r => ({...r}));
    this.audit = [{ id: crypto.randomUUID(), ts: new Date().toISOString(), text: `Loaded ${v.label}` }, ...this.audit];
  }
}